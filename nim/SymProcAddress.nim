#[
  Implmentation of MzHmo's SymProcAddress: https://github.com/MzHmO/SymProcAddress/tree/main
]#
import std/[tables]
import winim

var 
  g_FuncTable = initTable[string, int]()
  g_Gathered: bool = false

proc EnumSymbolsCallback(pSymInfo: PSYMBOL_INFO, symbolSize: ULONG, userContext: PVOID): bool =
  if ((pSymInfo.Flags and 0x200) == 0x200):
    var 
      l        = cast[cstring](pSymInfo.Name.addr).len
      funcName = newString(l)
    copyMem(funcName[0].addr, pSymInfo.Name.addr, l)
    g_FuncTable[funcName] = pSymInfo.Address
  return true

proc symProcAddress*(hModule: HMODULE, lpProcName: string): FARPROC =
  var hProc = GetCurrentProcess()
  if not g_Gathered:
    SymInitialize(hProc, NULL, TRUE)
    if not SymEnumSymbols(hProc, cast[ULONG64](hModule), NULL, cast[PSYM_ENUMERATESYMBOLS_CALLBACK](EnumSymbolsCallback), NULL):
      SymCleanup(hProc)
  try:
    result = cast[FARPROC](g_FuncTable[lpProcName])
  except KeyError:
    SetLastError(127)
    result = nil

proc main() =
  var 
    hUser32 = LoadLibraryA("user32.dll")
    res     = symProcAddress(hUser32, "MessageBoxA")
  
  if res != nil:
    var pMessageBoxA = cast[type(MessageBoxA)](res)
    discard pMessageBoxA(0, "Test 1", "Test1", MB_OK)

when isMainModule:
  main()